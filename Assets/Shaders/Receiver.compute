// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel DecodeUYVA_sRGB

StructuredBuffer<uint> Source;
RWTexture2D<float4> Destination;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

// YUV to RGB conversion (based on Rec.709 constants)
float3 YUV2RGB(float3 yuv)
{
    const float K_B = 0.0722;
    const float K_R = 0.2126;
    const float K_G = 1 - K_B - K_R;

    float y = yuv.x;
    float u = yuv.y;
    float v = yuv.z;

    float r = y + v * (1 - K_R);
    float b = y + u * (1 - K_B);
    float g = (y - K_R * r - K_B * b) / K_G;
    
    return float3(r, g, b);
}

// Packed UYVY conversion
float4 UnpackUYVY(uint v)
{
    float4 f = uint4(v, v >> 8, v >> 16, v >> 24) & 0xff;
    f.yw = (f.yw - 16) / 219; //  Y components (limited range)
    f.xz = (f.xz - 128) / 112; // UV components (limited range)
    return f;
}

// Packed alpha conversion
float4 UnpackAAAA(uint v)
{
    return (uint4(v, v >> 8, v >> 16, v >> 24) & 0xff) / 255.0;
}

// UYVA decoder function
float4x4 DecodeUYVA(uint2 id)
{
    uint w, h;
    Destination.GetDimensions(w, h);

    uint id_y = h - 1 - id.y;

    uint sp1 = id_y * w / 2 + id.x * 2;
    float4 uyvy01 = UnpackUYVY(Source[sp1 + 0]);
    float4 uyvy23 = UnpackUYVY(Source[sp1 + 1]);

    uint sp2 = id_y * w / 4 + id.x + w * h / 2;
    float4 a0123 = UnpackAAAA(Source[sp2]);

    return float4x4(float4(YUV2RGB(uyvy01.yxz), a0123.x),
        float4(YUV2RGB(uyvy01.wxz), a0123.y),
        float4(YUV2RGB(uyvy23.yxz), a0123.z),
        float4(YUV2RGB(uyvy23.wxz), a0123.w));
}

uint2 Inversion(uint2 dp)
{
    uint w, h;
    Destination.GetDimensions(w, h);
    dp.y = h - dp.y;
    return dp;
}

[numthreads(4, 8, 1)]
void DecodeUYVA_sRGB(uint2 id : SV_DispatchThreadID)
{
    float4x4 d = DecodeUYVA(id);
    uint2 dp = id * uint2(4, 1);

    //dp = Inversion(dp);

    Destination[dp + uint2(0, 0)] = d[0];
    Destination[dp + uint2(1, 0)] = d[1];
    Destination[dp + uint2(2, 0)] = d[2];
    Destination[dp + uint2(3, 0)] = d[3];
}